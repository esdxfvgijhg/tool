#!/usr/bin/env node

const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

function log(...messages) {
  console.log(...messages);
}

function error(...messages) {
  log('error: ', ...messages);
}

function die(...messages) {
  if (messages.length) {
    log(...messages);
  }
  process.exit(1);
}

// The lowest signal number (via `man 3 signal`).
const SIGHUP = 1;

// The highest signal number (via `man 3 signal`).
const SIGUSR2 = 31;

function run(command, ...args) {
  return new Promise((resolve, reject) => {
    let resolved = false;
    const child = child_process.spawn(command, args, {stdio: 'inherit'});

    process.on('SIGINT', () => {
      child.kill('SIGINT');
    });

    child.on('error', err => {
      if (!resolved) {
        resolved = true;
        reject(err);
      }
    });

    child.on('exit', (code) => {
      if (!resolved) {
        resolved = true;
        if (code) {
          let err;
          const description = `\`${[command, ...args].join(' ')}\``;
          if (code >= 128 + SIGHUP && code <= 128 + SIGUSR2) {
            err = new Error(
              `${description} exited due to signal ${code - 128}`,
            );
          } else {
            err = new Error(
              `${description} exited with status ${code}`,
            );
          }
          reject(err);
        } else {
          resolve();
        }
      }
    });
  });
}

function getHelper(command) {
  if (command.match(/^\w+$/)) {
    const helper = path.join(__dirname, 'portool-helpers', command);

    try {
      fs.accessSync(helper, fs.constants.X_OK);

      if (fs.statSync(helper).isFile()) {
        return helper;
      }
    } catch {
      // Doesn't exist, not a file (ie. directory), or not executable etc.
    }
  }
}

const HELP = 'run `portool help` to see available commands';

async function main(_node, _script, command, ...args) {
  if (!command) {
    die(`must supply command: ${HELP}`);
  }
  const helper = getHelper(command);
  if (!helper) {
    die(`no such command: ${command} - ${HELP}`);
  }

  await run(helper, ...args);
}

main(...process.argv)
  .catch(err => {
    error(err);
    process.exit(1);
  });

// vim: ft=javascript
