#!/bin/bash



# terminal vim
function zle-keymap-select() {
	zle reset-prompt
	zle -R
}

function +vi-hg-bookmarks() {
	emulate -L zsh
	if [[ -n "${hook_com[hg-active-bookmark]}" ]]; then
		hook_com[hg-bookmark-string]="${(Mj:,:)@}"
		ret=1
	fi
}
function +vi-hg-message() {
	emulate -L zsh
	# Suppress hg branch display if we can display a bookmark instead.
	if [[ -n "${hook_com[misc]}" ]]; then
		hook_com[branch]=''
	fi
	return 0
}
function +vi-git-untracked() {
	emulate -L zsh
	if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
		hook_com[unstaged]+="%F{blue}●%f"
	fi
}

# Anonymous function to avoid leaking variables.
function () {
	# Check for tmux by looking at $TERM, because $TMUX won't be propagated to any
	# nested sudo shells but $TERM will.
	local TMUXING=$([[ "$TERM" =~ "tmux" ]] && echo tmux)
	if [ -n "$TMUXING" -a -n "$TMUX" ]; then
		# In a a tmux session created in a non-root or root shell.
		local LVL=$(($SHLVL - 1))
	else
		# Either in a root shell created inside a non-root tmux session,
		# or not in a tmux session.
		local LVL=$SHLVL
	fi
	if [[ $EUID -eq 0 ]]; then
		local SUFFIX='%F{yellow}%n%f'$(printf '%%F{yellow}\u276f%.0s%%f' {1..$LVL})
	else
		local SUFFIX=$(printf '%%F{red}\u276f%.0s%%f' {1..$LVL})
	fi
	export PS1="%F{green}${SSH_TTY:+%n@%m}%f%B${SSH_TTY:+:}%b%F{blue}%B%1~%b%F{yellow}%B%(1j.*.)%(?..!)%b%f %B${SUFFIX}%b "
	if [[ -n "$TMUXING" ]]; then
		# Outside tmux, ZLE_RPROMPT_INDENT ends up eating the space after PS1, and
		# prompt still gets corrupted even if we add an extra space to compensate.
		export ZLE_RPROMPT_INDENT=0
	fi
}


function -set-tab-and-window-title() {
	emulate -L zsh
	local CMD="${1:gs/$/\\$}"
	print -Pn "\e]0;$CMD:q\a"
}
# Make CTRL-Z background things and unbackground them.
function fg-bg() {
	if [[ $#BUFFER -eq 0 ]]; then
		fg
	else
		zle push-input
	fi
}
# Executed before displaying prompt.
function -update-window-title-precmd() {
	emulate -L zsh
	if [[ HISTCMD_LOCAL -eq 0 ]]; then
		# About to display prompt for the first time; nothing interesting to show in
		# the history. Show $PWD.
		-set-tab-and-window-title "$(basename $PWD)"
	else
		local LAST=$(history | tail -1 | awk '{print $2}')
		if [ -n "$TMUX" ]; then
			# Inside tmux, just show the last command: tmux will prefix it with the
			# session name (for context).
			-set-tab-and-window-title "$LAST"
		else
			# Outside tmux, show $PWD (for context) followed by the last command.
			-set-tab-and-window-title "$(basename $PWD) > $LAST"
		fi
	fi
}
# Executed before executing a command: $2 is one-line (truncated) version of the command.
function -update-window-title-preexec() {
	emulate -L zsh
	setopt EXTENDED_GLOB
	HISTCMD_LOCAL=$((++HISTCMD_LOCAL))
	# Skip ENV=settings, sudo, ssh; show first distinctive word of command;
	# mostly stolen from:
	#	 https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/termsupport.zsh
	local TRIMMED="${2[(wr)^(*=*|mosh|ssh|sudo)]}"
	if [ -n "$TMUX" ]; then
		# Inside tmux, show the running command: tmux will prefix it with the
		# session name (for context).
		-set-tab-and-window-title "$TRIMMED"
	else
		# Outside tmux, show $PWD (for context) followed by the running command.
		-set-tab-and-window-title "$(basename $PWD) > $TRIMMED"
	fi
}
function -record-start-time() {
	emulate -L zsh
	ZSH_START_TIME=${ZSH_START_TIME:-$SECONDS}
}
function -report-start-time() {
	emulate -L zsh
	if [ $ZSH_START_TIME ]; then
		local DELTA=$(($SECONDS - $ZSH_START_TIME))
		local DAYS=$((~~($DELTA / 86400)))
		local HOURS=$((~~(($DELTA - $DAYS * 86400) / 3600)))
		local MINUTES=$((~~(($DELTA - $DAYS * 86400 - $HOURS * 3600) / 60)))
		local SECS=$(($DELTA - $DAYS * 86400 - $HOURS * 3600 - $MINUTES * 60))
		local ELAPSED=''
		test "$DAYS" != '0' && ELAPSED="${DAYS}d"
		test "$HOURS" != '0' && ELAPSED="${ELAPSED}${HOURS}h"
		test "$MINUTES" != '0' && ELAPSED="${ELAPSED}${MINUTES}m"
		if [ "$ELAPSED" = '' ]; then
			SECS="$(print -f "%.2f" $SECS)s"
		elif [ "$DAYS" != '0' ]; then
			SECS=''
		else
			SECS="$((~~$SECS))s"
		fi
		ELAPSED="${ELAPSED}${SECS}"
		export RPROMPT="%F{cyan}%{$__WINCENT[ITALIC_ON]%}${ELAPSED}%{$__WINCENT[ITALIC_OFF]%}%f $RPROMPT_BASE"
		unset ZSH_START_TIME
	else
		export RPROMPT="$RPROMPT_BASE"
	fi
}
function -auto-ls-after-cd() {
	emulate -L zsh
	# Only in response to a user-initiated `cd`, not indirectly (eg. via another
	# function).
	if [ "$ZSH_EVAL_CONTEXT" = "toplevel:shfunc" ]; then
		ls -a
	fi
}
# Remember each command we run.
function -record-command() {
	__WINCENT[LAST_COMMAND]="$2"
}
# Update vcs_info (slow) after any command that probably changed it.
function -maybe-show-vcs-info() {
	local LAST="$__WINCENT[LAST_COMMAND]"
	# In case user just hit enter, overwrite LAST_COMMAND, because preexec
	# won't run and it will otherwise linger.
	__WINCENT[LAST_COMMAND]="<unset>"
	# Check first word; via:
	# http://tim.vanwerkhoven.org/post/2012/10/28/ZSH/Bash-string-manipulation
	case "$LAST[(w)1]" in
		cd|cp|git|rm|touch|mv|)
			vcs_info
			;;
		*)
			;;
	esac
}

