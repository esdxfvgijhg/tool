#!/bin/bash


# various utilities
if [ -x /usr/bin/dircolors ]; then
  test -r $HOME/.dircolors && eval "$(dircolors -b $HOME/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

function set-title() {
  if [[ -z "$ORIG" ]]; then
    ORIG=$PS1
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1=${ORIG}${TITLE}
#  or
  #mytitle="Lights 1"
	#echo -e '\033]2;'$mytitle'\007'
}

function wlan-on() {
sudo ifconfig wlp2s0 up
}

function wlan-scan() {
sudo iwlist wlp2s0 scan | grep -Ev IE | grep -P "ESSID.*" | sort | uniq
}

function wlan-connect() {
sudo iwconfig wlp2s0 essid $1 key s:$2
}

function wlan-check() {
sudo iw wlp2s0 link
}


function wlan-pass() {
sudo wpa_passphrase $1 >> /etc/wpa_supplicant.conf
}

#wpa_supplicant -B -D wext -i wlan0 -c /etc/wpa_supplicant.conf

function asatree() {
awk  '{
				z1=$1; z2=$2; z3=$3; z4=$4; for(i=5;i<=NF;i++){z4=z4" "$i};
        a[z1][z2][z3] ?
            a[z1][z2][z3]=a[z1][z2][z3]"\n\t\t\t"z4 :
            a[z1][z2][z3]=""z4 ;
      }
      END{
        for(cont in a){
            printf "\n\\textbf{%s}\\newline", cont;
            for(count in a[cont]){
                for(city in a[cont][count]){
#                    printf "%s", count;
                    printf " " count " " city " " a[cont][count][city]
      }
      }}}' $1 | sort >> $2
}


function c() {
  gedit ~/.config/$@/.-
}


function search1() {
	cd $BIBPATH/storage
}

function search2() {
	cd $BIBPATH/../network
}

function search3() {
	cd $BIBPATH/../resources
}

function sedx() {
  sed -Ei "s/$1/$2/g" $3
}

function paper {
	cd $WRITINGPATH
	gedit $WRITINGPATH/main.tex &
	latexmk -f -cd -pvc -jobname=paper main
}
function these {
	cd $WRITINGPATH
	gedit $WRITINGPATH/main.tex &
	latexmk -f -cd -pvc -jobname=these main
}
function slide {
	cd $WRITINGPATH
	gedit $WRITINGPATH/main.tex &
	latexmk -f -cd -pvc -jobname=slide main
}
function report {
	cd $WRITINGPATH
	gedit $WRITINGPATH/main.tex &
	latexmk -f -cd -pvc -jobname=report main
}

function iperl {
#  echo 'This is Interactive Perl shell'
  rlwrap -A -pgreen -S"perl> " perl -wnE'say eval()//$@'
}

case "$(uname)" in
  Darwin*)
    if [ -x /usr/libexec/java_home ]; then
      if /usr/libexec/java_home &> /dev/null ; then
        export ANT_OPTS="-Xmx4096m -Xms4096m -XX:MaxPermSize=1024m -XX:-UseGCOverheadLimit -Dorg.gradle.workers.max=4"
        export GRADLE_OPTS="-Dorg.gradle.workers.max=4"
              if /usr/libexec/java_home -v1.8.0 &> /dev/null; then
          export JAVA_HOME=$(/usr/libexec/java_home -v1.8.0)
        else
          export JAVA_HOME=$(/usr/libexec/java_home)
        fi
              export JAVA_OPTS="-Xmx4096m -Xms1024m -XX:MaxPermSize=512m"
      fi
    fi
    ;;
  Linux*)
    export JAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64
    ;;
  esac
  
#function waff {
#  CWD="$PWD"
#  cd $TOOLSPATH/ns-3/ns-3 >/dev/null
#  ./waf --cwd="$CWD" $*
#  cd - >/dev/null
#}

#function waf {
#    CWD="$PWD"
#    cd $NS3CUR >/dev/null
#    waf --cwd="$CWD" $*
#    cd - >/dev/null
#}

#function wafr {
#    waf --run "$*"
#}

# convert a video to mp4 + webm in one go for web
function webvideo() {
  ffmpeg -i $1 -acodec libvorbis -ac 2 -b:a 128k -ar 44100 -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 2M -maxrate 2M -bufsize 4M -s 1280x720 $1.webm
  ffmpeg -i $1 -movflags +faststart -acodec libfdk_aac -ac 2 -b:a 128k -ar 44100 -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 2M -maxrate 2M -bufsize 4M -s 1280x720 $1.mp4
}

function webvideohigh() {
  ffmpeg -i $1 -acodec libvorbis -ac 2 -b:a 160k -ar 44100 -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 3M -maxrate 3M -bufsize 6M -s 1280x720 $1--high.webm
  ffmpeg -i $1 -movflags +faststart -acodec libfdk_aac -ac 2 -b:a 160k -ar 44100 -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 3M -maxrate 3M -bufsize 6M -s 1280x720 $1--high.mp4
}

function webvideolow() {
  ffmpeg -i $1 -acodec libvorbis -ac 2 -b:a 96k -ar 44100 -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 1M -maxrate 1M -bufsize 2M -s 1280x720 $1--low.webm
  ffmpeg -i $1 -movflags +faststart -acodec libfdk_aac -ac 2 -b:a 96k -ar 44100 -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 1M -maxrate 1M -bufsize 2M -s 1280x720 $1--low.mp4
}

# convert a video to mp4 + webm in one go for web
function webvideonoaudio() {
  ffmpeg -i $1 -an -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 2M -maxrate 2M -bufsize 4M -s 1280x720 $1--no-audio.webm
  ffmpeg -i $1 -movflags +faststart -an -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 2M -maxrate 2M -bufsize 4M -s 1280x720 $1--no-audio.mp4
}

function webvideohighnoaudio() {
  ffmpeg -i $1 -an -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 3M -maxrate 3M -bufsize 6M -s 1280x720 $1--high--no-audio.webm
  ffmpeg -i $1 -movflags +faststart -an -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 3M -maxrate 3M -bufsize 6M -s 1280x720 $1--high--no-audio.mp4
}

function webvideolownoaudio() {
  ffmpeg -i $1 -an -vcodec libvpx -pix_fmt yuv420p -r 25 -qmin 10 -qmax 42 -cpu-used 0 -threads 2 -quality good -b:v 1M -maxrate 1M -bufsize 2M -s 1280x720 $1--low--no-audio.webm
  ffmpeg -i $1 -movflags +faststart -an -vcodec libx264 -vprofile high -preset slow -pix_fmt yuv420p -r 25 -b:v 1M -maxrate 1M -bufsize 2M -s 1280x720 $1--low--no-audio.mp4
}

# create and change to directory/folder
function take() {
  mkdir -p $1
  cd $1
}

# a function to get the current branch for git shortcuts etc
function current_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

# creates an archive from given directory
mktar() { tar cvf  "${1%%/}.tar" "${1%%/}"; }
mktgz() { tar cvzf "${1%%/}.tgz" "${1%%/}"; }
mkzip() { zip -r   "${1%%/}"     "${1%%/}"; }

# easy extract
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       rar x $1       ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tgz)       tar xvzf $1    ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tbz)       tar xvjf $1    ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}


vf() { $EDITOR $(fzf) ; }
se() { cd ~/.local/bin ; $EDITOR $(fzf) ;}
vf() { fzf | xargs -r -I % $EDITOR % ;}
gh(){
   path=${*: -1}
   if [[ $path != */* ]]
   then path=SimSaladin/$path
   fi
   cmd=${*: 1:$(( ${#@} - 1 ))}
   git ${cmd} https://github.com/${path}
}
agit(){
   for x in $(cat .repos); do
      echo
      echo $x
      git -C "$x" "$@"
   done
}
glmr(){
   git fetch origin merge-requests/$1/head:mr-$1 && git checkout mr-$1
}
glh(){
   git lg "$@" | head
}
pathapp(){ PATH=$1:$PATH;}
# weather aliases
wttrf()
{
  curl -H "Accept-Language: ${LANG%_*}" wttr.in/"$1"
}
wttr()
{
  wttrf "$1?u"
}
wttrm()
{
  wttrf "$1?m"
}
wt()
{
  wttr "$1?0"
}


# C compiling shortcuts for gcc
gccc() {
  if [[ $1 =~ \.c$ ]]; then
    gcc -std=c99 -Wall -pedantic -Wextra -Werror -O2 -g $1 -o ${1%%.*};
  else
    echo "$1 is not a c file"
  fi
}
gcclm() {
  if [[ $1 =~ \.c$ ]]; then
    gcc -std=c99 -g $1 -o ${1%%.*} -lm;
  else
    echo "$1 is not a c file"
  fi
}



mcd() { mkdir -p -- "$@"; cd -- "$@";}
cls() { cd "$1"; ls;}
crun() { make "$1"; ./$1;}
backup() { cp "$1"{,.bak};}
md5check() { md5sum "$1" | grep "$2";}

## function to control web sync services
#websync() { systemctl --user $1 offlineimap-oneshot.timer; systemctl --user $1 vdirsyncer-oneshot.timer }

filetemplate() {
  template=$1
  file=$2
  tempbase=$(basename -- "$template")
  ext="${tempbase##*.}"
  if [[ $file != '' ]]; then
    if [[ ! $file =~ \.$ext$ ]]; then
      file=$file.$ext
    fi
    [ ! -f $file ] && cp $template $file;
    vi $file;
  fi
}



# git pull, merge master into branch
#gpmm() { git checkout $1 && git pull && git merge master && git push }
## dirs aliases
#da() { pushd $1 > /dev/null && dirs -v }
#dr() { pushd +$1 > /dev/null && dirs -v }
#pnew() {
#  pass cp template $1 && pass edit $1
#}
## easy vim/terminal switch
#fancy-ctrl-z () {
#  if [[ $#BUFFER -eq 0 ]]; then
#    BUFFER="fg"
#    zle accept-line
#  else
#    zle push-input
#    zle clear-screen
#  fi
#}




# Until .agrc exists...
# (https://github.com/ggreer/the_silver_searcher/pull/709)
function ag() {
  emulate -L zsh

  # italic blue paths, pink line numbers, underlined purple matches
  command ag --pager="less -iFMRSX" --color-path=34\;3 --color-line-number=35 --color-match=35\;1\;4 "$@"
}

# fd - "find directory"
# Inspired by: https://github.com/junegunn/fzf/wiki/examples#changing-directory
function fd() {
  local DIR
  DIR=$(bfs -type d 2> /dev/null | sk --no-multi --preview='test -n "{}" && ls {}' -q "$*") && cd "$DIR"
}

# fh - "find [in] history"
# Inspired by: https://github.com/junegunn/fzf/wiki/examples#command-history
function fh() {
  print -z $(fc -l 1 | sk --no-multi --tac -q "$*" | sed 's/ *[0-9]*\*\{0,1\} *//')
}


# TODO: decide whether this is a reasonable idea
function files() {
  find "$@" | xargs -o $EDITOR
}

# Print headers, following redirects.
# Based on: https://stackoverflow.com/a/10060342/2103996
function headers() {
  emulate -L zsh

  if [ $# -ne 1 ]; then
    echo "error: a host argument is required"
    return 1
  fi

  local REMOTE=$1

  curl -sSL -D - "$REMOTE" -o /dev/null
}

function history() {
  emulate -L zsh

  # This is a function because Zsh aliases can't take arguments.
  fc -l 1
}

function mvim() {
  emulate -L zsh

  # Makes user-installed fonts visible to MacVim.
  if which reattach-to-user-namespace &> /dev/null ; then
    reattach-to-user-namespace mvim
  else
    command mvim
  fi
}

function scratch() {
  local SCRATCH=$(mktemp -d)
  echo 'Spawing subshell in scratch directory:'
  echo "  $SCRATCH"
  (cd $SCRATCH; zsh)
  echo "Removing scratch directory"
  rm -r "$SCRATCH"
}

function ssh() {
  emulate -L zsh

  if [[ -z "$@" ]]; then
    # common case: getting to my workstation
    command ssh dev
  else
    local LOCAL_TERM=$(echo -n "$TERM" | sed -e s/tmux/screen/)
    env TERM=$LOCAL_TERM command ssh "$@"
  fi
}

# Print information about a remote SSL certificate.
# Based on: https://serverfault.com/a/661982/219567
function ssl() {
  emulate -L zsh

  if [ $# -ne 1 ]; then
    echo "error: a host argument is required"
    return 1
  fi

  local REMOTE=$1

  echo | openssl s_client -showcerts -servername "$REMOTE" -connect "$REMOTE:443" 2>/dev/null | openssl x509 -inform pem -noout -text
}

function tmux() {
  emulate -L zsh

  # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
  # (Inspired by: https://gist.github.com/lann/6771001)
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
    return
  fi

  # Check for .tmux file (poor man's Tmuxinator).
  if [ -x .tmux ]; then
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha -sha512 .tmux)"
    if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
      cat .tmux
      read -k 1 -r \
        'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
      echo
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/..tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # Attach to existing session, or create one, based on current directory.
  local SESSION_NAME=$(basename "${$(pwd)//[.:]/_}")
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

# Bounce the Dock icon, if iTerm does not have focus.
function bounce() {
  if [ -n "$TMUX" ]; then
    print -Pn "\ePtmux;\e\e]1337;RequestAttention=1\a\e\\"
  else
    print -Pn "\e]1337;RequestAttention=1\a"
  fi
}

# regmv = regex + mv (mv with regex parameter specification)
#   example: regmv '/\.tif$/.tiff/' *
#   replaces .tif with .tiff for all files in current dir
#   must quote the regex otherwise "\." becomes "."
# limitations: ? doesn't seem to work in the regex, nor *
regmv() {
  emulate -L zsh

  if [ $# -lt 2 ]; then
    echo "  Usage: regmv 'regex' file(s)"
    echo "  Where:       'regex' should be of the format '/find/replace/'"
    echo "Example: regmv '/\.tif\$/.tiff/' *"
    echo "   Note: Must quote/escape the regex otherwise \"\.\" becomes \".\""
    return 1
  fi
  local REGEX="$1"
  shift
  while [ -n "$1" ]
  do
    local NEWNAME=$(echo "$1" | sed "s${REGEX}g")
    if [ "${NEWNAME}" != "$1" ]; then
      mv -i -v "$1" "$NEWNAME"
    fi
    shift
  done
}

function email() {
  emulate -L zsh

  if ! tmux has-session -t email 2> /dev/null; then
    # Make saved attachments go to ~/Downloads by default.
    tmux new-session -d -s email -c ~/Downloads -n mutt
    tmux send-keys -t email:mutt mutt Enter
    tmux new-window -t email -c ~/.mutt -n sync
    tmux send-keys -t email:sync '~/.mutt/scripts/control.sh --daemon' Enter
    tmux split-window -t email:sync -v -f -l 8 -c ~/.mutt
    tmux send-keys -t email:sync.bottom '~/.mutt/scripts/control.sh' Enter
  fi
  if [ -z "$TMUX" ]; then
    tmux attach -t email:mutt
  else
    tmux switch-client -t email:mutt
  fi
}

# Convenience function for jumping to hashed directory aliases
# (ie. `j rn` -> `jump rn` -> `cd ~rn`).
function jump() {
  emulate -L zsh

  if [ $# -eq 0 ]; then
    fd
  else
    local DIR="${*%%/}"

    if [ $(hash -d|cut -d= -f1|grep -c "^${DIR}\$") = 0 ]; then
      # Not in `hash -d`: use as initial argument to fd.
      fd "$*"
    else
      cd ~"$DIR"
    fi
  fi
}

function _jump_complete() {
  emulate -L zsh

  local COMPLETIONS
  COMPLETIONS="$(hash -d|cut -d= -f1)"
  reply=( "${(ps:\n:)COMPLETIONS}" )
}





# Complete filenames and `hash -d` entries.
#compctl -f -K _jump_complete jump

# Print a pruned version of a tree.
#
# Examples:
#
#   # Print all "*.js" files in src:
#   subtree '*.js' src
#
#   # Print all "*.js" files in the current directory:
#   subtree '*.js'
#
#   # Print all "*.js" and "*.ts" files in current directory:
#   subtree '*.js|*.ts'
#
function subtree() {
  tree -a --prune -P "$@"
}

# "[t]ime[w]arp" by setting GIT_AUTHOR_DATE and GIT_COMMITTER_DATE.
function tw() {
  emulate -L zsh

  local TS=$(ts "$@")
  echo "Spawning subshell with timestamp: $TS"
  env GIT_AUTHOR_DATE="$TS" GIT_COMMITTER_DATE="$TS" zsh
}

# "tick" by incrementing GIT_AUTHOR_DATE and GIT_COMMITTER_DATE.
function tick() {
  emulate -L zsh

  if [ -z "$GIT_AUTHOR_DATE" -o -z "$GIT_COMMITTER_DATE" ]; then
    echo 'Expected $GIT_AUTHOR_DATE and $GIT_COMMITTER_DATE to be set.'
    echo 'Did you forget to timewarp with `tw`?'
  else
    # Fragile assumption: dates are in format produced by `tw`/`ts`.
    local TS=$(expr \
      $(echo $GIT_AUTHOR_DATE | cut -d ' ' -f 1) \
      $(parseoffset "$@") \
    )
    local TZ=$(date +%z)
    echo "Bumping timestamp to: $TS $TZ"
    export GIT_AUTHOR_DATE="$TS $TZ"
    export GIT_COMMITTER_DATE="$TS $TZ"
  fi
}





